name: Deploy DLT Pipeline with DABs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      # Required for GitHub OIDC token authentication
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper bundle comparison
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Databricks CLI and dependencies
        # Download the Databricks CLI.
      # See https://github.com/databricks/setup-cli
        uses: databricks/setup-cli@main

      - name: Get OIDC ID Token
        id: get_token
        run: |
          IDTOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/RookieDataEngineer" | jq -r '.value')
          echo "::add-mask::$IDTOKEN"
          echo "idtoken=$IDTOKEN" >> $GITHUB_OUTPUT
      
      - name: Exchange GitHub JWT for Databricks token
        id: get_databricks_token
        run: |
          DATABRICKS_TOKEN=$(curl --request POST https://${{ secrets.DATABRICKS_WORKSPACE_HOST }}/oidc/v1/token \
            --data "subject_token=${{ steps.get_id_token.outputs.id_token }}" \
            --data 'subject_token_type=urn:ietf:params:oauth:token-type:jwt' \
            --data 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange' \
            --data 'scope=all-apis' | jq -r '.access_token')
          echo "::add-mask::$DATABRICKS_TOKEN"
          echo "DATABRICKS_TOKEN=$DATABRICKS_TOKEN" >> $GITHUB_ENV
      
      # in the bundle's settings file.
      - name: Update Databricks host in config
        run: |
          chmod +x ./update_bundle_host.sh
          ./update_bundle_host.sh "${{ secrets.DATABRICKS_WORKSPACE_HOST }}"
      
      
      - name: Test Databricks Connectivity
        run: |
          echo "Testing connectivity to Databricks..."
          echo "Host: ${{ secrets.DATABRICKS_WORKSPACE_HOST }}"
          # Show partial token for debugging (optional)
          echo "Token (first 10 chars): ${DATABRICKS_TOKEN:0:10}******"

          # Make a simple GET request to /Me
          # --fail means curl will exit with a non-zero code if not 2xx
          curl --fail -v -X GET \
            -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            "${{ secrets.DATABRICKS_WORKSPACE_HOST }}/api/2.0/preview/scim/v2/Me"

          echo "Connectivity test succeeded!"

      - name: validate step
        run: databricks bundle validate
        working-directory: .
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_WORKSPACE_HOST }}
          DATABRICKS_TOKEN: ${{ env.DATABRICKS_TOKEN }}
          DATABRICKS_BUNDLE_ENV: development

      - name: deploy step
        run: databricks bundle deploy
        working-directory: .
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_WORKSPACE_HOST }}
          DATABRICKS_TOKEN: ${{ env.DATABRICKS_TOKEN }}
          DATABRICKS_BUNDLE_ENV: development


          
      #     # Update DLT pipeline
      #     databricks bundle run \
      #       --target ${{ secrets.DATABRICKS_ENVIRONMENT }} \
      #       --job-id ${{ secrets.DLT_PIPELINE_ID }} \
      #       --as-run-submit
      
      # - name: Verify Deployment
      #   run: |
      #     # Get the pipeline status
      #     PIPELINE_STATUS=$(databricks pipelines get --pipeline-id ${{ secrets.DLT_PIPELINE_ID }} --output JSON | jq -r '.state')
      #     echo "Pipeline Status: $PIPELINE_STATUS"
          
      #     if [[ "$PIPELINE_STATUS" == "IDLE" || "$PIPELINE_STATUS" == "RUNNING" ]]; then
      #       echo "DLT Pipeline successfully deployed and running"
      #     else
      #       echo "DLT Pipeline deployment issue. Status: $PIPELINE_STATUS"
      #       exit 1
      #     fi
