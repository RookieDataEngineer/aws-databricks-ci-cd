name: Deploy DLT Pipeline with DABs

on:
  push:
    branches: [ '*' ]  # Trigger on push to any branch.
  pull_request:
    branches: [ '*' ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Run Validations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for accurate bundle comparison
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Databricks CLI and Dependencies
        # See https://github.com/databricks/setup-cli for more details.
        uses: databricks/setup-cli@main


  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    permissions:
      # Required for GitHub OIDC token authentication
      id-token: write
      contents: read
    needs: [validate]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Databricks CLI and Dependencies
        uses: databricks/setup-cli@main

      - name: Get OIDC ID Token
        id: get_id_token
        run: |
          IDTOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/RookieDataEngineer" | jq -r '.value')
          echo "Token obtained: ${#IDTOKEN} characters long"
          echo "::add-mask::$IDTOKEN"
          echo "idtoken=$IDTOKEN" >> $GITHUB_OUTPUT

      - name: Exchange GitHub JWT for Databricks Token
        id: get_databricks_token
        run: |
          DATABRICKS_TOKEN=$(curl --request POST "${{ secrets.DATABRICKS_WORKSPACE_HOST }}/oidc/v1/token" \
            --data "client_id=${{ secrets.SERVICE_PRINCIPAL_ID }}" \
            --data "subject_token=${{ steps.get_id_token.outputs.idtoken }}" \
            --data 'subject_token_type=urn:ietf:params:oauth:token-type:jwt' \
            --data 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange' \
            --data 'scope=all-apis' | jq -r '.access_token')

          echo "Using token of length: ${#DATABRICKS_TOKEN}"
          echo "::add-mask::$DATABRICKS_TOKEN"
          echo "DATABRICKS_TOKEN=$DATABRICKS_TOKEN" >> $GITHUB_ENV

      - name: Update Databricks Host in Config
        run: |
          chmod +x ./update_bundle_host.sh
          ./update_bundle_host.sh "${{ secrets.DATABRICKS_WORKSPACE_HOST }}"
          
      - name: Run Bundle Validation
        run: databricks bundle validate
        working-directory: .
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_WORKSPACE_HOST }}
          DATABRICKS_TOKEN: ${{ env.DATABRICKS_TOKEN }}
          DATABRICKS_BUNDLE_ENV: development

      - name: Deploy Bundle
        run: databricks bundle deploy
        working-directory: .
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_WORKSPACE_HOST }}
          DATABRICKS_TOKEN: ${{ env.DATABRICKS_TOKEN }}
          DATABRICKS_BUNDLE_ENV: development
